@model IEnumerable<CrmTechTitans.Models.Member>

@{
    ViewData["Title"] = "All Members";
}

<div class="main-content">
    <div class="center-container">
        <h1>All Members</h1>
        <p>
            Browse the list of industries associated with the Niagara Industry Association.
            Use the "Create New Industry" button to add a new industry to the directory.
        </p>

        <header class="page-header">
            <div class="view-actions">
                <a asp-action="Create" class="btn btn-danger">
                    <i class="fas fa-user-plus"></i> Create New Member
                </a>
                <div class="view-toggle">
                    <button class="btn btn-secondary active" data-view="cards">
                        <i class="fas fa-th-large"></i> Cards
                    </button>
                    <button class="btn btn-secondary" data-view="table">
                        <i class="fas fa-table"></i> Table
                    </button>
                </div>
            </div>
        </header>

        <!-- Filter and Search Form -->
        <div class="filter-container bg-light p-3 rounded mb-4">
            <div class="row">
                <!-- Search by Member Name -->
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label for="searchString" class="form-label">Search by Member Name</label>
                        <input type="text" id="searchString" class="form-control" placeholder="Enter member name" />
                    </div>
                </div>
                <!-- Filter by Member Status -->
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label for="statusFilter" class="form-label">Filter by Member Status</label>
                        <select id="statusFilter" class="form-control">
                            <option value="">All Statuses</option>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sorting -->
        <div class="btn-group mb-4" role="group">
            <button id="sortByName" class="btn btn-secondary">
                Sort by Member Name
            </button>
            <button id="sortByStatus" class="btn btn-secondary">
                Sort by Status
            </button>
        </div>
    </div>

    <p></p>

    <!-- Card View -->
    <section class="members-grid" id="cards-view">
        @foreach (var item in Model)
        {
            <div class="member-card" data-name="@item.MemberName" data-status="@item.MembershipStatus">
                <div class="status-badge status-@item.MembershipStatus.ToString().ToLower()">
                    @item.MembershipStatus.ToString()
                </div>
                <div class="card-header">
                    <div class="company-logo">
                        <i class="fas fa-building"></i>
                    </div>
                    <div class="company-info">
                        <h2 class="company-name">@item.MemberName</h2>
                        <p class="membership-type">@item.MembershipType</p>
                    </div>
                </div>

                <div class="card-content">
                    <div class="data-grid">
                        <div class="data-item">
                            <i class="fas fa-users"></i>
                            <div>
                                <div class="data-label">Company Size</div>
                                <div class="data-value">@item.CompanySize employees</div>
                            </div>
                        </div>
                        <div class="data-item">
                            <i class="fas fa-calendar-alt"></i>
                            <div>
                                <div class="data-label">Member Since</div>
                                <div class="data-value">@item.MemberSince.ToString("MMM yyyy")</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="card-actions">
                        <a href="#" class="btn btn-link text-danger">
                            <i class="fas fa-archive"></i>
                            <span class="action-label">Archive</span>
                        </a>
                        <a asp-action="Details" asp-route-id="@item.ID" class="btn-secondary btn-link text-primary">
                            <i class="fas fa-info-circle"></i>
                            <span class="action-label">Details</span>
                        </a>
                    </div>
                </div>
            </div>
        }
    </section>

    <!-- Table View -->
    <section class="table-responsive" id="table-view" style="display: none;">
        <table class="table custom-table" id="membersTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Company Size</th>
                    <th>Member Since</th>
                    <th>Status</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.MemberName" data-status="@item.MembershipStatus">
                        <td data-label="Name">@item.MemberName</td>
                        <td data-label="Type">@item.MembershipType</td>
                        <td data-label="Company Size">@item.CompanySize</td>
                        <td data-label="Member Since">@item.MemberSince.ToShortDateString()</td>
                        <td data-label="Status"><span class="status-tag">@item.MembershipStatus</span></td>
                        <td data-label="Actions" class="text-center action-buttons">
                            <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-edit">Edit</a>
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-details">Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>
</div>

@section Scripts {
    <script>
        // Initialize view immediately after DOM loads
        document.addEventListener('DOMContentLoaded', () => {
            const preferredView = localStorage.getItem('preferredView') || 'cards';
            const cardsView = document.getElementById('cards-view');
            const tableView = document.getElementById('table-view');

            // Set initial display states
            cardsView.style.display = preferredView === 'cards' ? 'grid' : 'none';
            tableView.style.display = preferredView === 'table' ? 'block' : 'none';

            // Update button states
            document.querySelectorAll('.view-toggle button').forEach(button => {
                button.classList.toggle('active', button.dataset.view === preferredView);
            });

            // Attach event listeners for filtering and sorting
            attachFilterAndSortListeners();
        });

        // Toggle between card and table views
        document.querySelectorAll('.view-toggle button').forEach(button => {
            button.addEventListener('click', () => {
                // Toggle active class
                document.querySelectorAll('.view-toggle button').forEach(b => b.classList.remove('active'));
                button.classList.add('active');

                // Toggle views
                const view = button.dataset.view;
                const cardsView = document.getElementById('cards-view');
                const tableView = document.getElementById('table-view');

                cardsView.style.display = view === 'cards' ? 'grid' : 'none';
                tableView.style.display = view === 'table' ? 'block' : 'none';

                // Save preference
                localStorage.setItem('preferredView', view);
            });
        });

        // Function to attach filtering and sorting event listeners
        function attachFilterAndSortListeners() {
            const searchString = document.getElementById('searchString');
            const statusFilter = document.getElementById('statusFilter');
            const sortByName = document.getElementById('sortByName');
            const sortByStatus = document.getElementById('sortByStatus');

            // Filter and sort when inputs change
            searchString.addEventListener('input', filterAndSort);
            statusFilter.addEventListener('change', filterAndSort);
            sortByName.addEventListener('click', () => sortBy('name'));
            sortByStatus.addEventListener('click', () => sortBy('status'));
        }

        // Function to filter and sort members
        function filterAndSort() {
            const searchValue = document.getElementById('searchString').value.toLowerCase();
            const statusValue = document.getElementById('statusFilter').value;

            // Filter members
            document.querySelectorAll('.member-card, tbody tr').forEach(item => {
                const name = item.getAttribute('data-name').toLowerCase();
                const status = item.getAttribute('data-status');

                const nameMatch = name.includes(searchValue);
                const statusMatch = statusValue === '' || status === statusValue;

                if (nameMatch && statusMatch) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Function to sort members
        function sortBy(field) {
            const cardsView = document.getElementById('cards-view');
            const tableView = document.getElementById('table-view');

            const items = Array.from(cardsView.querySelectorAll('.member-card'))
                .concat(Array.from(tableView.querySelectorAll('tbody tr')));

            items.sort((a, b) => {
                const aValue = a.getAttribute(`data-${field}`).toLowerCase();
                const bValue = b.getAttribute(`data-${field}`).toLowerCase();

                if (aValue < bValue) return -1;
                if (aValue > bValue) return 1;
                return 0;
            });

            // Re-append sorted items
            items.forEach(item => {
                if (item.classList.contains('member-card')) {
                    cardsView.appendChild(item);
                } else {
                    tableView.querySelector('tbody').appendChild(item);
                }
            });
        }
    </script>
}
