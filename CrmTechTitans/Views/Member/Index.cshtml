@model IEnumerable<CrmTechTitans.Models.Member>
@using CrmTechTitans.Models.Enumerations

@{
    ViewData["Title"] = "All Members";
}
<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-end mb-4">
        <!-- Remove bottom margin on <h1> -->
        <h1 class="mb-0">All Members</h1>

        <div class="d-flex align-items-end gap-3">
            <!-- Use .btn-secondary for a gray button -->
            <a asp-action="Create" class="btn btn-secondary"
               data-bs-toggle="tooltip"
               title="Add a new member to the system">
                <!-- Add .me-2 to create space between icon and text -->
                <i class="fas fa-user-plus me-2"></i>
                Create New Member
            </a>

            <div class="view-toggle">
                <button class="view-btn active" data-view="cards"
                        data-bs-toggle="tooltip" title="Switch to Card View">
                    <i class="fas fa-th-large"></i>
                </button>
                <button class="view-btn" data-view="table"
                        data-bs-toggle="tooltip" title="Switch to Table View">
                    <i class="fas fa-table"></i>
                </button>
            </div>
        </div>
    </header>
</div>


    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="filter-row d-flex align-items-end gap-3">
            <div class="filter-item">
                <label for="memberNameFilter" class="form-label">Search by Member Name</label>
                <input type="text" id="memberNameFilter" class="form-control" placeholder="Enter member name">
            </div>
            <div class="filter-item">
                <label for="membershipStatusFilter" class="form-label">Filter by Member Status</label>
                <select id="membershipStatusFilter" class="form-select">
                    <option value="">All Statuses</option>
                    <option value="GoodStanding">Good Standing</option>
                    <option value="OutStanding">Out Standing</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
        </div>
    </section>



    <section class="members-grid" id="cards-view">
        @foreach (var item in Model)
        {
            <div class="member-card" data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()">
                <div class="card-logo">
                    @if (item.MemberThumbnail?.Content != null)
                    {
                        string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                        string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                        <img src="@imageSrc" alt="@item.MemberName Logo" class="img-fluid rounded" />
                    }
                    else
                    {
                        <i class="fas fa-building"></i>
                    }
                </div>
                <div class="card-content">
                    <div class="card-header">
                        <h2 class="company-name">@item.MemberName</h2>
                        <span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">
                            @item.MembershipStatus
                        </span>
                    </div>
                    <div class="card-details">
                        <div class="detail-item">
                            <i class="fas fa-users"></i>
                            <span>@item.CompanySize</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-calendar-alt"></i>
                            <span>Member since @item.MemberSince.ToString("MMM yyyy")</span>
                        </div>
                        @if (!string.IsNullOrEmpty(item.CompanyWebsite))
                        {
                            <div class="detail-item">
                                <i class="fas fa-globe"></i>
                                <a href="@item.CompanyWebsite" target="_blank">Website</a>
                            </div>
                        }
                    </div>
                    <div class="membership-types">
                        <h3>Membership Types:</h3>
                        <p>
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </p>
                    </div>
                </div>
                <div class="card-actions">
                    <a href="javascript:void(0);"
                       class="btn btn-outline-danger btn-sm archive-btn"
                       data-id="@item.ID"
                       data-status="@item.MembershipStatus.ToString()"
                       data-bs-toggle="tooltip"
                       title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive this member" : "Archive this member")">
                        <!-- Dynamically change the icon based on the status -->
                        <i class="fas fa-archive @(item.MembershipStatus == MembershipStatus.Cancelled ? "fa-undo" : "fa-archive")"></i>
                    </a>
                    <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-outline-primary btn-sm" data-bs-toggle="tooltip" title="View member details">
                        <i class="fas fa-info-circle"></i>
                    </a>
                </div>
            </div>
        }

    </section>

    <section class="table-responsive" id="table-view" style="display: none;">
        <table class="table custom-table" id="membersTable">
            <thead>
                <tr>
                    <th>Logo</th>
                    <th onclick="sortTable(1)">Name</th>
                    <th onclick="sortTable(2)">Type</th>
                    <th onclick="sortTable(3)">Company Size</th>
                    <th onclick="sortTable(4)">Member Since</th>
                    <th onclick="sortTable(5)">Status</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()">
                        <td>
                            @if (item.MemberThumbnail?.Content != null)
                            {
                                string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                                string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                                <img src="@imageSrc" alt="@item.MemberName Logo" class="img-fluid rounded" style="max-width: 50px;" />
                            }
                            else
                            {
                                <i class="fas fa-building"></i>
                            }
                        </td>
                        <td>@item.MemberName</td>
                        <td>
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </td>
                        <td>@item.CompanySize</td>
                        <td>@item.MemberSince.ToShortDateString()</td>
                        <td><span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">@item.MembershipStatus</span></td>
                        <td class="text-center">
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member details">Details</a>
                            <a href="javascript:void(0);"
                               class="btn btn-sm archive-btn @(item.MembershipStatus == MembershipStatus.Cancelled ? "btn-success" : "btn-danger")"
                               data-id="@item.ID"
                               data-status="@item.MembershipStatus.ToString()"
                               data-bs-toggle="tooltip"
                               title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive Member" : "Archive Member")">
                                @(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive" : "Archive")
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </section>
    <!-- Records per page -->
    <div class="col-md-4">
        <label for="recordsPerPage">Records per page:</label>
        <select id="recordsPerPage" class="form-control">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
    <!-- Pagination Controls -->
    <div id="paginationControls" class="pagination">
        <button id="prevPage" class="btn btn-primary">Previous</button>
        <span id="pageInfo"></span>
        <button id="nextPage" class="btn btn-primary">Next</button>
    </div>
</div>

@section Scripts {
    <script>
                document.addEventListener('DOMContentLoaded', function () {
            const cardsView = document.getElementById('cards-view');
            const tableView = document.getElementById('table-view');
            const viewButtons = document.querySelectorAll('.view-btn');
            const memberNameFilter = document.getElementById('memberNameFilter');
            const membershipStatusFilter = document.getElementById('membershipStatusFilter');
            const recordsPerPageDropdown = document.getElementById('recordsPerPage');
            const prevPageButton = document.getElementById('prevPage');
            const nextPageButton = document.getElementById('nextPage');
            const pageInfo = document.getElementById('pageInfo');

            let currentPage = 1;
            let recordsPerPage = parseInt(recordsPerPageDropdown.value);
            let totalRecords = 0;
            let totalPages = 0;

            // Set default filter to "Good Standing"
            membershipStatusFilter.value = "GoodStanding";

            function setView(view) {
                cardsView.style.display = view === 'cards' ? 'grid' : 'none';
                tableView.style.display = view === 'table' ? 'block' : 'none';
                viewButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.view === view));
                localStorage.setItem('preferredView', view);
                updatePagination(); // Update pagination when switching views
            }

            viewButtons.forEach(button => {
                button.addEventListener('click', function () {
                    setView(this.dataset.view);
                });
            });

            function getVisibleRows() {
                const nameFilter = memberNameFilter.value.toLowerCase();
                const statusFilter = membershipStatusFilter.value.toLowerCase();

                if (cardsView.style.display === 'grid') {
                    return Array.from(document.querySelectorAll('#cards-view .member-card')).filter(card => {
                        const name = (card.dataset.name || '').toLowerCase();
                        const status = (card.dataset.status || '').toLowerCase();
                        return name.includes(nameFilter) && (statusFilter === '' || status === statusFilter);
                    });
                } else {
                    return Array.from(document.querySelectorAll('#membersTable tbody tr')).filter(row => {
                        const name = (row.dataset.name || '').toLowerCase();
                        const status = (row.dataset.status || '').toLowerCase();
                        return name.includes(nameFilter) && (statusFilter === '' || status === statusFilter);
                    });
                }
            }

            function showPage(page) {
                const visibleRows = getVisibleRows();
                const startIndex = (page - 1) * recordsPerPage;
                const endIndex = startIndex + recordsPerPage;

                if (cardsView.style.display === 'grid') {
                    document.querySelectorAll('#cards-view .member-card').forEach(card => card.style.display = 'none');
                    visibleRows.slice(startIndex, endIndex).forEach(card => card.style.display = 'block');
                } else {
                    document.querySelectorAll('#membersTable tbody tr').forEach(row => row.style.display = 'none');
                    visibleRows.slice(startIndex, endIndex).forEach(row => row.style.display = '');
                }

                pageInfo.textContent = `Page ${page} of ${Math.ceil(visibleRows.length / recordsPerPage)}`;
                prevPageButton.disabled = page === 1;
                nextPageButton.disabled = page === Math.ceil(visibleRows.length / recordsPerPage);
            }

            function updatePagination() {
                const visibleRows = getVisibleRows();
                totalRecords = visibleRows.length;
                totalPages = Math.ceil(totalRecords / recordsPerPage);

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            recordsPerPageDropdown.addEventListener('change', function () {
                recordsPerPage = parseInt(this.value);
                currentPage = 1;
                updatePagination();
            });

            prevPageButton.addEventListener('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            nextPageButton.addEventListener('click', function () {
                const visibleRows = getVisibleRows();
                const totalPages = Math.ceil(visibleRows.length / recordsPerPage);

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            function filterMembers() {
                currentPage = 1;
                updatePagination();
            }

            memberNameFilter.addEventListener('input', filterMembers);
            membershipStatusFilter.addEventListener('change', filterMembers);

            filterMembers();

            const preferredView = localStorage.getItem('preferredView') || 'cards';
            setView(preferredView);

            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            const archiveButtons = document.querySelectorAll('.archive-btn');

            archiveButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const memberId = this.dataset.id;
                    let currentStatus = this.dataset.status.toLowerCase();
                    const newStatus = (currentStatus === 'cancelled') ? 'GoodStanding' : 'Cancelled';
                    const confirmMessage = (currentStatus === 'cancelled')
                        ? "Are you sure you want to unarchive this member?"
                        : "Are you sure you want to archive this member?";

                    if (!confirm(confirmMessage)) {
                        return;
                    }

                    fetch(`/Member/ToggleArchive`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            memberId: parseInt(memberId),
                            newStatus: newStatus
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(error => { throw new Error(error.message); });
                            }
                            return response.json();
                        })
                        .then(data => {
                            alert(data.message);
                            location.reload();
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            alert("Failed to update member status.");
                        });
                });
            });
        });
         // Sort the table by member name in ascending order on page load
            sortTable(1, "asc"); // 0 is the index for the member name column

        function sortTable(columnIndex, initialDirection = "asc") {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("membersTable");
            switching = true;
            dir = initialDirection;

            if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-asc")) {
                dir = "desc";
            } else if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-desc")) {
                dir = "asc";
            }

            for (i = 0; i < table.rows[0].getElementsByTagName("th").length; i++) {
                table.rows[0].getElementsByTagName("th")[i].classList.remove("sorted-asc", "sorted-desc");
            }

            table.rows[0].getElementsByTagName("th")[columnIndex].classList.add(dir === "asc" ? "sorted-asc" : "sorted-desc");

            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir === "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>

    <style>
        th {
            cursor: pointer;
        }

            th.sorted-asc::after {
                content: " ▲";
            }

            th.sorted-desc::after {
                content: " ▼";
            }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                margin: 0 5px;
            }

        #pageInfo {
            margin: 0 10px;
            line-height: 2;
        }
    </style>
}