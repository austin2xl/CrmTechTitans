@model IEnumerable<CrmTechTitans.Models.Member>

@{
	ViewData["Title"] = "All Members";
}
<partial name="_Notification" />

<div class="main-content">
	<!-- Page Title -->
	<header class="page-header d-flex justify-content-between align-items-center">
		<div>
			<h1>All Members</h1>
		</div>

		<div class="d-flex align-items-center gap-3">
			<a asp-action="Create" class="btn btn-danger" data-bs-toggle="tooltip" title="Add a new member to the system">
				<i class="fas fa-user-plus"></i> Create New Member
			</a>

			<!-- View Toggle -->
			<div class="view-toggle d-flex align-items-center">
				<button class="btn btn-secondary active me-2" data-view="cards" data-bs-toggle="tooltip" title="Switch to Card View">
					<i class="fas fa-th-large"></i>
				</button>
				<button class="btn btn-secondary" data-view="table" data-bs-toggle="tooltip" title="Switch to Table View">
					<i class="fas fa-table"></i>
				</button>
			</div>
		</div>
	</header>

	<section class="filter-container bg-light p-3 rounded mb-4">
		<div class="row">
			<!-- Search by Member Name -->
			<div class="col-md-6 mb-3">
				<label for="searchString" class="form-label">Search by Member Name</label>
				<input type="text" id="memberFilter" class="form-control" placeholder="Enter member name" data-bs-toggle="tooltip" title="Enter a member’s name to search">
			</div>

			<!-- Filter by Member Status -->
			<div class="col-md-6 mb-3">
				<label for="statusFilter" class="form-label">Filter by Member Status</label>
				<select id="statusFilter" class="form-control" data-bs-toggle="tooltip" title="Filter members based on status">
					<option value="">All Statuses</option>
					<option value="GoodStanding">Good Standing</option>
					<option value="OutStanding">Out Standing</option>
					<option value="Cancelled">Cancelled</option>
				</select>
			</div>
		</div>
	</section>


	<!-- Card View -->
	<section class="members-grid" id="cards-view">
		@foreach (var item in Model)
		{
			<div class="member-card" data-name="@item.MemberName" data-status="@item.MembershipStatus.ToString().ToLower()">
				<div class="status-badge status-@item.MembershipStatus.ToString().ToLower()">
					@item.MembershipStatus
				</div>
				<div class="card-header">
					<div class="company-logo">
						@{
							if (item.MemberThumbnail?.Content != null)
							{
								string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
								string imageSrc = string.Format("data:" + item.MemberThumbnail.MimeType + ";base64,{0}", imageBase64);
								<img src="@imageSrc" alt="Profile Picture of @item?.MemberName"
									 title="Profile Picture of @item?.MemberName" class="img-fluid rounded" />
							}
							else
							{
								<i class="fas fa-building"></i>
							}

						}

					</div>
					<div class="company-info">
						<h2 class="company-name">@item.MemberName</h2>
						<p class="membership-type">@item.MembershipType</p>
					</div>
				</div>

				<div class="card-content">
					<div class="data-grid">
						<div class="data-item">
							<i class="fas fa-users"></i>
							<div>
								<span class="data-label">Company Size</span>
								<span class="data-value">@item.CompanySize employees</span>
							</div>
						</div>
						<div class="data-item">
							<i class="fas fa-calendar-alt"></i>
							<div>
								<span class="data-label">Member Since</span>
								<span class="data-value">@item.MemberSince.ToString("MMM yyyy")</span>
							</div>
						</div>
					</div>
				</div>

				<div class="card-footer">
					<div class="card-actions">
						<a href="#" class="btn btn-link text-danger" data-bs-toggle="tooltip" title="Archive this member">
							<i class="fas fa-archive"></i> Archive
						</a>
						<a asp-action="Details" asp-route-id="@item.ID" class="btn btn-link text-primary" data-bs-toggle="tooltip" title="View member details">
							<i class="fas fa-info-circle"></i> Details
						</a>
					</div>
				</div>
			</div>
		}
	</section>

	<!-- Table View -->
	<section class="table-responsive" id="table-view" style="display: none;">
		<table class="table custom-table" id="membersTable">
			<thead>
				<tr>
					<th onclick="sortTable(0)">Name</th>
					<th onclick="sortTable(1)">Type</th>
					<th onclick="sortTable(2)">Company Size</th>
					<th onclick="sortTable(3)">Member Since</th>
					<th onclick="sortTable(4)">Status</th>
					<th class="text-center">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model)
				{
					<tr data-name="@item.MemberName" data-status="@item.MembershipStatus.ToString().ToLower()">
						<td>
							@{
								if (item.MemberThumbnail?.Content != null)
								{
									string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
									string imageSrc = string.Format("data:" + item.MemberThumbnail.MimeType + ";base64,{0}", imageBase64);
									<img src="@imageSrc" alt="Profile Picture of @item?.MemberName"
										 title="Profile Picture of @item?.MemberName" class="img-fluid rounded" />
								}

							}
						</td>
						<td>@item.MemberName</td>
						<td>@item.MembershipType</td>
						<td>@item.CompanySize</td>
						<td>@item.MemberSince.ToShortDateString()</td>
						<td><span class="status-tag">@item.MembershipStatus</span></td>
						<td class="text-center action-buttons">
							@*  <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-edit" data-bs-toggle="tooltip" title="Edit member details">Edit</a>*@
							<a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-details" data-bs-toggle="tooltip" title="View member details">Details</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</section>
</div>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			// Load preferred view from localStorage
			const preferredView = localStorage.getItem('preferredView') || 'cards';
			document.getElementById('cards-view').style.display = preferredView === 'cards' ? 'grid' : 'none';
			document.getElementById('table-view').style.display = preferredView === 'table' ? 'block' : 'none';
			// Handle view toggle buttons
			document.querySelectorAll('.view-toggle button').forEach(button => {
				button.classList.toggle('active', button.dataset.view === preferredView);
				button.addEventListener('click', () => {
					document.querySelectorAll('.view-toggle button').forEach(b => b.classList.remove('active'));
					button.classList.add('active');
					localStorage.setItem('preferredView', button.dataset.view);
					document.getElementById('cards-view').style.display = button.dataset.view === 'cards' ? 'grid' : 'none';
					document.getElementById('table-view').style.display = button.dataset.view === 'table' ? 'block' : 'none';
				});
			});
		});
		// Sort table function
		function sortTable(columnIndex, initialDirection = "asc") {
			var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
			table = document.getElementById("membersTable");
			switching = true;
			dir = initialDirection; ;

			// Determine the current sorting direction
			if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-asc")) {
				dir = "desc";
			} else if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-desc")) {
				dir = "asc";
			}

			// Remove sorting classes from all headers
			for (i = 0; i < table.rows[0].getElementsByTagName("th").length; i++) {
				table.rows[0].getElementsByTagName("th")[i].classList.remove("sorted-asc", "sorted-desc");
			}

			// Add sorting class to the clicked header
			table.rows[0].getElementsByTagName("th")[columnIndex].classList.add(dir === "asc" ? "sorted-asc" : "sorted-desc");
			// Perform sorting

			while (switching) {
				switching = false;
				rows = table.rows;
				for (i = 1; i < (rows.length - 1); i++) {
					shouldSwitch = false;
					x = rows[i].getElementsByTagName("td")[columnIndex];
					y = rows[i + 1].getElementsByTagName("td")[columnIndex];
					if (dir === "asc") {
						if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
							shouldSwitch = true;
							break;
						}
					} else if (dir === "desc") {
						if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
							shouldSwitch = true;
							break;
						}
					}
				}
				if (shouldSwitch) {
					rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
					switching = true;
					switchcount++;
				} else if (switchcount === 0 && dir === "asc") {
					dir = "desc";
					switching = true;
				}
			}
		}

		$(document).ready(function () {
			// Filter table based on input values
			function filterTable() {
				var memberFilter = $('#memberFilter').val().toLowerCase();
				var statusFilter = $('#statusFilter').val().toLowerCase();

				console.log("member Filter:", memberFilter);
				console.log("Status Filter:", statusFilter);

				$('#membersTable tbody tr').each(function () {
					var memberText = $(this).find('td:nth-child(2)').text().toLowerCase();
					var statusText = $(this).find('td:nth-child(6)').text().toLowerCase();

					var nameMatch = memberFilter === "" || memberText.includes(memberFilter);
					var statusMatch = statusFilter === "" || statusText.includes(statusFilter);
					$(this).toggle(memberMatch && statusMatch);
				});
			}
			// Attach filter function to input events
			$('#memberFilter, #statusFilter').on('input', filterTable);

			// Initialize Bootstrap Tooltips
			var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
			var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
				return new bootstrap.Tooltip(tooltipTriggerEl);
			});

		});
	</script>
	<style>
		th {
			cursor: pointer;
		}

			th.sorted-asc::after {
				content: " ▲";
			}

			th.sorted-desc::after {
				content: " ▼";
			}
	</style>
}